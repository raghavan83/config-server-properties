service.name=reservation-service

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.username= postgres
spring.datasource.password= postgres
spring.datasource.url= jdbc:postgresql://localhost:5432/hrsreservationdb
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

eureka.instance.preferIpAddress= false
eureka.instance.hostname=localhost
eureka.instance.instance-id= ${spring.application.name}:${random.value}
eureka.client.registerWithEureka= true
eureka.client.fetchRegistry= true
eureka.client.serviceUrl.defaultZone= http://localhost:8761/eureka

gateway-server.hostname=localhost
        
spring.kafka.consumer.bootstrap-servers= localhost:9092
spring.kafka.consumer.group-id=reservation-service-group-id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*


spring.kafka.producer.bootstrap-servers= localhost:9092
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer

        
zipkin.baseUrl: http://localhost:9411

management.endpoints.web.exposure.include= health, metrics, prometheus
management.metrics.tags.application=${spring.application.name}